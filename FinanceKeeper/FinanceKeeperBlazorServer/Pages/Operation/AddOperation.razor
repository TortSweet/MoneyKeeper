@page "/financialoperation/addoperation"
@page "/financialoperation/editoperation/{OperationId:int}"
@using Microsoft.AspNetCore.Components
@using FinanceKeeperBlazorServer.Data.Models
@using FinanceKeeperBlazorServer.Services.Interfaces


<h3>Add</h3>
@inject NavigationManager NavigationManager

<hr />
<EditForm Model="@Operation" OnValidSubmit="SaveOperation">
    <DataAnnotationsValidator />
    <label class="form-label" for="Description">Description</label>
    <div class="col-md-4">
        <InputText class="form-control" @bind-Value="Operation.Description" />
    </div>
    <ValidationMessage For="@(() => Operation.Description)" />
    
    <label for="Description" class="form-label">Amount</label>
    <div class="col-md-4">
        <InputNumber TValue="decimal" class="form-control" @bind-Value="Operation.Amount" />
    </div>
    <ValidationMessage For="@(() => Operation.Description)" />
    
    <label for="CategoryId" class="form-label">CategoryId</label>
    <div class="col-md-4">
        <InputNumber TValue="int" class="form-control" @bind-Value="Operation.FinancialCategoryId" />
    </div>
    <ValidationMessage For="@(() => Operation.FinancialCategoryId)" />
    <div class="mb-3">
        <label for="Type" class="form-label">Date</label>
        <div class="col-md-4">
            <InputDate class="form-select" @bind-Value="Operation.Date" />
        </div>
        <ValidationMessage For="@(() => Operation.FinancialCategoryId)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>


@code {
    [Parameter]
    public int OperationId { get; set; }
    protected string Title = "Add";
    protected FinancialOperation? Operation = new();

    [Inject] protected IBaseServices<FinancialOperation> BaseOperationServices { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        if (OperationId != 0)
        {
            Title = "Edit";
            Operation = await BaseOperationServices.GetByIdAsync(OperationId);
        }
    }
    protected async Task SaveOperation()
    {
        if (Operation?.OperationId != 0)
        {
            if (Operation != null) await BaseOperationServices.UpdateAsync(Operation);
        }
        else
        {
            await BaseOperationServices.CreateAsync(Operation);
        }
        Cancel();
    }

    public void Cancel()
    {
    // ReSharper disable once StringLiteralTypo
        NavigationManager.NavigateTo("/financialoperation");
    }

}
